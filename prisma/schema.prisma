generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  projects    Project[]
  projectTags ProjectTag[]
  taskTags    TaskTag[]
}

model ProjectTag {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  colorBackground String
  colorText       String
  projectId       Int?
  project         Project? @relation(fields: [projectId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}

model Project {
  id          Int          @id @default(autoincrement())
  x           Int
  y           Int
  w           Int
  h           Int
  name        String
  description String
  image       String
  springs     Spring[]
  tags        ProjectTag[]
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
}

model Spring {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  state       String
  proyectId   Int
  proyect     Project  @relation(fields: [proyectId], references: [id])
  tasks       Task[]
}

model TaskTag {
  id     Int    @id @default(autoincrement())
  name   String @unique
  color  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id])
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  state       String
  springId    Int
  spring      Spring     @relation(fields: [springId], references: [id])
  items       Item[]
  reminders   Reminder[]
  tags        TaskTag[]
}

model Reminder {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  state       String
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
}

model Item {
  id         Int       @id @default(autoincrement())
  x          Int
  y          Int
  w          Int
  h          Int
  imgId      Int?      @unique
  videoId    Int?      @unique
  video      Video?    @relation(fields: [videoId], references: [id])
  img        Img?      @relation(fields: [imgId], references: [id])
  document   Document? @relation(fields: [documentId], references: [id])
  documentId Int?      @unique
  taskId     Int
  task       Task      @relation(fields: [taskId], references: [id])
}

model Img {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  url         String
  item        Item?
}

model Video {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  url         String
  item        Item?
}

model Document {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  url         String
  item        Item?
}
